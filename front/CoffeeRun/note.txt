Web 开发权威指南
Chris Auino, Todd Gandee, et al.

第八章 模块、对象和方法

管理咖啡订单的应用 --- CoffeeRun
UI：处理事件和DOM操作
内部逻辑：处理数据
服务端交换逻辑：负责和远端服务器交互，保存或者检索数据

服务器 <-> 服务端交换逻辑 <- 数据 -> 内部逻辑 <- 数据 -> UI  <-事件 DOM  <-> 用户
                                                      UI 数据-> DOM

模块模式


//============立即调用的函数表达式(Immediately Invoked Function Expression, IIFE)
(function(){

})();
//匿名函数
function(){

}
//匿名函数被括号包裹，该括号告诉浏览器，不要将这组代码解释为函数声明
//浏览器看到这个括号就会知道，“啊，好的。这是一个匿名函数，我会阻止它做任何事情的”
//大多数情况中，我们会将匿名函数当作一个参数进行传递
(function(){

})
//通过后面的空括号，立即调用了这个方法
//当浏览器读到空括号时，他意识到你希望调用括号前的任何东西：“好吧，我明白了。我现在有一个匿名函数可以调用了。”
(function(){

})()
//应用：声明后马上调用，并且之后就再也没有调用过了
//例子
function hello(){
  alert("hello")
}
hello()

(function(){
  alert("hello")
})()
//我们想在不创建额外的全局变量或者函数的前提下，只运行某些代码一次

============全局命名空间
在CoffeeRun中可能会有很多名称相同的函数，如果把他们都写在全局命名空间中，他们会互相覆盖。
因此，应该在函数内声明它们，这能避免它们被外界的代码访问或者覆盖
因为我们是在模块内组织代码，所以可能会想让一部分（不是全部）函数能被外界访问，为此可以利用IIFE可以传参的特性

//===========IIFE 传参
// const arr = [1,2,3,4,5]
// function getArr(){
//   return arr
// }

//0.
// function init(){
//   const getArrResult = getArr()
//   getArrResult.forEach((item,index)=>{
//     arr[index] = item + 2
//   })
// }
// init()
// console.log(arr)//3, 4, 5, 6, 7

//1.
// function init(getArrResult){
//   getArrResult.forEach((item,index)=>{
//     arr[index] = item + 2
//   })
// }
// const getArrResult = getArr()
// init(getArrResult)

//2.
// (function (getArrResult){
//   getArrResult.forEach((item,index)=>{
//     arr[index] = item + 2
//   })
// })(getArr())
//一个通过getArr方法产生的数组被传入到IIFE中，IIFE接受这个数组并标记为getArrResult。在IIFE函数中，数组中的每个元素都被绑定了事件监听器


//拓展：模块私有数据
构造函数和原型方法可以访问IIFE内部声明的所有变量